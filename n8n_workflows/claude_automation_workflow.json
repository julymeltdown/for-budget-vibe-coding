{
  "name": "Claude Desktop Automation Workflow",
  "nodes": [
    {
      "parameters": {},
      "id": "4a8c7e8d-1234-5678-9abc-def012345678",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "http://host.docker.internal:5003/api/tasks",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "status",
                "value": "pending"
              }
            ]
          }
        }
      },
      "id": "5b9d8f9e-2345-6789-abcd-ef0123456789",
      "name": "Get Pending Tasks",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [450, 300]
    },
    {
      "parameters": {
        "functionCode": "// Extract task information and prepare for processing\nconst inputData = $input.first().json;\nconst tasks = inputData.tasks || [];\n\nconsole.log('Input data:', JSON.stringify(inputData, null, 2));\nconsole.log('Tasks found:', tasks.length);\n\nif (!tasks || tasks.length === 0) {\n  return [{\n    json: {\n      message: \"No pending tasks found\",\n      tasks: [],\n      processed: false\n    }\n  }];\n}\n\n// Process each task with proper item structure\nconst processedItems = tasks.map((task, index) => {\n  console.log(`Processing task ${index}:`, JSON.stringify(task, null, 2));\n  \n  const taskId = task.id || task.task_id || String(index + 1);\n  const taskName = task.name || task.task_name || `Task ${taskId}`;\n  const taskDescription = task.description || task.task_description || '';\n  \n  console.log(`Mapped task ID: ${taskId}, Name: ${taskName}`);\n  \n  return {\n    json: {\n      task_id: String(taskId),  // Ensure it's a string\n      task_name: taskName,\n      task_description: taskDescription,\n      priority: task.priority || 'medium',\n      subtasks: task.subtasks || [],\n      processed: true,\n      timestamp: new Date().toISOString(),\n      original_task: task  // Keep original for debugging\n    }\n  };\n});\n\nconsole.log('Processed items:', processedItems.length);\nconsole.log('First processed item:', JSON.stringify(processedItems[0], null, 2));\n\nreturn processedItems;"
      },
      "id": "6cae9faf-3456-789a-bcde-f01234567890",
      "name": "Process Tasks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{\"http://host.docker.internal:5003/api/taskmaster/show/\" + ($json.task_id || '1')}}",
        "options": {}
      },
      "id": "7dbf0fb0-4567-89ab-cdef-012345678901",
      "name": "Get Task Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [850, 300]
    },
    {
      "parameters": {
        "functionCode": "// Prepare Claude prompt based on task details\nconst currentItem = $input.first();\nconst taskDetails = currentItem.json;\nconst processTasksData = $node[\"Process Tasks\"].json;\n\nconsole.log('=== PREPARE CLAUDE PROMPT DEBUG ===');\nconsole.log('Current item:', JSON.stringify(currentItem, null, 2));\nconsole.log('Task details:', JSON.stringify(taskDetails, null, 2));\nconsole.log('Process Tasks data:', JSON.stringify(processTasksData, null, 2));\n\nconst taskId = processTasksData.task_id;\nconst taskName = processTasksData.task_name;\nconst taskDescription = processTasksData.task_description;\n\n// Validate task_id exists\nif (!taskId) {\n  console.error('❌ task_id is missing from Process Tasks output');\n  throw new Error('task_id is missing from Process Tasks output');\n}\n\nconsole.log('✅ Processing task ID:', taskId);\nconsole.log('✅ Task name:', taskName);\n\n// Create a comprehensive prompt\nconst prompt = `Task ID: ${taskId}\nTask Name: ${taskName}\nDescription: ${taskDescription}\n\nTask Details:\n${taskDetails.stdout || JSON.stringify(taskDetails, null, 2)}\n\nRequirements:\n1. Follow best practices and coding standards\n2. Include proper error handling\n3. Add appropriate comments and documentation\n4. Create tests if applicable\n5. Use the Task Master MCP tools for project management\n\nPlease implement this task step by step using the available MCP tools.`;\n\n// Return properly structured item with validated data\nconst result = {\n  json: {\n    task_id: String(taskId),  // Ensure it's a string\n    task_name: taskName || 'Unknown Task',\n    prompt: prompt,\n    project_name: \"automation-project\",\n    wait_for_continue: true,\n    create_new_chat: false,\n    timestamp: new Date().toISOString(),\n    prepared: true\n  }\n};\n\nconsole.log('=== PREPARE CLAUDE PROMPT RESULT ===');\nconsole.log('Result to return:', JSON.stringify(result, null, 2));\n\nreturn [result];"
      },
      "id": "8ec01fc1-5678-9abc-def0-123456789012",
      "name": "Prepare Claude Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:5003/api/automation/run",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ {\n  \"prompt\": $json.prompt || \"Default prompt\",\n  \"wait_for_continue\": $json.wait_for_continue || true,\n  \"create_new_chat\": $json.create_new_chat || false,\n  \"project_name\": $json.project_name || \"automation-project\"\n} }}",
        "options": {}
      },
      "id": "9fd12fd2-6789-abcd-ef01-234567890123",
      "name": "Trigger Claude Automation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "amount": 5,
        "unit": "seconds"
      },
      "id": "a0e23fe3-789a-bcde-f012-345678901234",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "http://host.docker.internal:5003/api/automation/status/{{$node[\"Trigger Claude Automation\"].json.task_id}}",
        "options": {}
      },
      "id": "b1f34ff4-89ab-cdef-0123-456789012345",
      "name": "Check Automation Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1650, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.status}}",
              "operation": "equals",
              "value2": "completed"
            }
          ]
        }
      },
      "id": "c2045005-9abc-def0-1234-567890123456",
      "name": "IF Status Complete",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1850, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:5003/api/taskmaster/run-tests",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "task_id",
              "value": "={{$node[\"Process Tasks\"].json.task_id}}"
            }
          ]
        },
        "options": {}
      },
      "id": "d3156116-abcd-ef01-2345-678901234567",
      "name": "Run Tests",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2050, 200]
    },
    {
      "parameters": {
        "method": "PUT", 
        "url": "={{\"http://host.docker.internal:5003/api/tasks/\" + $node[\"Process Tasks\"].json.task_id + \"/status\"}}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "done"
            }
          ]
        },
        "options": {}
      },
      "id": "e4267227-bcde-f012-3456-789012345678",
      "name": "Update Task Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2250, 200]
    },
    {
      "parameters": {
        "amount": 30,
        "unit": "seconds"
      },
      "id": "f5378338-cdef-0123-4567-890123456789",
      "name": "Wait Longer",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [2050, 400]
    },
    {
      "parameters": {
        "message": "Task {{$node[\"Process Tasks\"].json.task_name}} completed successfully!",
        "additionalFields": {}
      },
      "id": "06489449-def0-1234-5678-901234567890",
      "name": "Send Success Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [2450, 200],
      "disabled": true,
      "notes": "Configure Slack credentials to enable notifications"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "error",
              "value": "Automation timeout or failed"
            }
          ]
        },
        "options": {}
      },
      "id": "1759a55a-ef01-2345-6789-012345678901",
      "name": "Set Error",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [2250, 400]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Get Pending Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Pending Tasks": {
      "main": [
        [
          {
            "node": "Process Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Tasks": {
      "main": [
        [
          {
            "node": "Get Task Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Task Details": {
      "main": [
        [
          {
            "node": "Prepare Claude Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Claude Prompt": {
      "main": [
        [
          {
            "node": "Trigger Claude Automation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Claude Automation": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Check Automation Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Automation Status": {
      "main": [
        [
          {
            "node": "IF Status Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Status Complete": {
      "main": [
        [
          {
            "node": "Run Tests",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait Longer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Tests": {
      "main": [
        [
          {
            "node": "Update Task Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Task Status": {
      "main": [
        [
          {
            "node": "Send Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Longer": {
      "main": [
        [
          {
            "node": "Check Automation Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Error": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "01234567-89ab-cdef-0123-456789abcdef",
  "id": "1",
  "meta": {
    "instanceId": "n8n-claude-automation"
  },
  "tags": []
}